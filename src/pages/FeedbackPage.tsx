import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Star, TrendingUp, MessageSquare, Award, RotateCcw, Download } from 'lucide-react';
import Header from '../components/Header';
import LoadingSpinner from '../components/LoadingSpinner';
import { generateFeedback } from '../services/openaiService';

interface FeedbackData {
  overallScore: number;
  vocabularyScore: number;
  accuracyScore: number;
  confidenceScore: number;
  feedback: string;
  strengths: string[];
  improvements: string[];
  recommendations: string[];
}

const FeedbackPage: React.FC = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [feedbackData, setFeedbackData] = useState<FeedbackData | null>(null);
  const [interviewData, setInterviewData] = useState<any>(null);

  useEffect(() => {
    const data = sessionStorage.getItem('completedInterview');
    if (!data) {
      navigate('/upload');
      return;
    }

    const parsedData = JSON.parse(data);
    setInterviewData(parsedData);
    generateInterviewFeedback(parsedData);
  }, [navigate]);

  const generateInterviewFeedback = async (data: any) => {
    try {
      setIsLoading(true);
      
      // Simulate transcript data (in real implementation, this would come from Tavus)
      const mockTranscript = `
        Interviewer: Tell me about yourself and your background.
        Candidate: I'm a software engineer with 5 years of experience in full-stack development. I've worked with React, Node.js, and various databases.
        
        Interviewer: What interests you about this ${data.interviewType.toLowerCase()} role?
        Candidate: I'm excited about the opportunity to work on challenging projects and contribute to innovative solutions.
        
        Interviewer: Can you describe a challenging project you've worked on?
        Candidate: I recently led the development of a real-time analytics dashboard that improved our client's decision-making process by 40%.
      `;

      const feedback = await generateFeedback(mockTranscript, data.interviewType);
      setFeedbackData(feedback);
      
      // Store feedback for future reference
      const feedbackRecord = {
        ...data,
        feedback: feedback,
        generatedAt: Date.now()
      };
      
      // Save to localStorage for history
      const existingHistory = JSON.parse(localStorage.getItem('interviewHistory') || '[]');
      existingHistory.push(feedbackRecord);
      localStorage.setItem('interviewHistory', JSON.stringify(existingHistory));
      
    } catch (error) {
      console.error('Failed to generate feedback:', error);
      // Provide fallback feedback
      setFeedbackData({
        overallScore: 7.5,
        vocabularyScore: 8.0,
        accuracyScore: 7.0,
        confidenceScore: 7.5,
        feedback: "Great job on your interview! You demonstrated good technical knowledge and communication skills. Continue practicing to improve your confidence and provide more specific examples.",
        strengths: ["Clear communication", "Technical knowledge", "Professional demeanor"],
        improvements: ["Provide more specific examples", "Show more enthusiasm", "Ask more questions"],
        recommendations: ["Practice behavioral questions", "Research the company more", "Prepare specific examples using STAR method"]
      });
    } finally {
      setIsLoading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-green-400';
    if (score >= 6) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreBackground = (score: number) => {
    if (score >= 8) return 'bg-green-500';
    if (score >= 6) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  const startNewInterview = () => {
    sessionStorage.removeItem('completedInterview');
    navigate('/upload');
  };

  const downloadReport = () => {
    if (!feedbackData || !interviewData) return;
    
    const report = `
INTERVIEW FEEDBACK REPORT
========================

Interview Details:
- Type: ${interviewData.interviewType}
- Date: ${new Date(interviewData.completedAt).toLocaleDateString()}
- Resume: ${interviewData.resume}

Scores:
- Overall Score: ${feedbackData.overallScore}/10
- Vocabulary: ${feedbackData.vocabularyScore}/10
- Accuracy: ${feedbackData.accuracyScore}/10
- Confidence: ${feedbackData.confidenceScore}/10

Feedback:
${feedbackData.feedback}

Strengths:
${feedbackData.strengths.map(s => `- ${s}`).join('\n')}

Areas for Improvement:
${feedbackData.improvements.map(i => `- ${i}`).join('\n')}

Recommendations:
${feedbackData.recommendations.map(r => `- ${r}`).join('\n')}

Generated by InterviewReady - AI-Powered Interview Preparation
    `;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `interview-feedback-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen">
        <Header showBackButton title="Generating Feedback" />
        <div className="flex items-center justify-center h-96">
          <LoadingSpinner size="lg" text="Analyzing your interview performance..." />
        </div>
      </div>
    );
  }

  if (!feedbackData) {
    return (
      <div className="min-h-screen">
        <Header showBackButton title="Feedback" />
        <div className="flex items-center justify-center h-96">
          <div className="text-center">
            <p className="text-gray-400 mb-4">Failed to generate feedback</p>
            <button
              onClick={startNewInterview}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg"
            >
              Start New Interview
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <Header showBackButton title="Interview Feedback" />
      
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header Section */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mb-4">
            <Award className="w-8 h-8 text-white" />
          </div>
          <h2 className="text-3xl font-bold text-white mb-2">Interview Complete!</h2>
          <p className="text-gray-300 text-lg">
            Here's your detailed performance analysis for the {interviewData?.interviewType} interview
          </p>
        </div>

        {/* Overall Score */}
        <div className="bg-gradient-to-r from-blue-600/20 to-purple-600/20 rounded-xl p-8 mb-8 border border-blue-500/30">
          <div className="text-center">
            <h3 className="text-2xl font-semibold text-white mb-4">Overall Score</h3>
            <div className="relative inline-block">
              <div className="w-32 h-32 rounded-full border-8 border-gray-700 flex items-center justify-center">
                <div className={`w-24 h-24 rounded-full ${getScoreBackground(feedbackData.overallScore)} flex items-center justify-center`}>
                  <span className="text-2xl font-bold text-white">
                    {feedbackData.overallScore.toFixed(1)}
                  </span>
                </div>
              </div>
            </div>
            <p className="text-gray-300 mt-4">
              {feedbackData.overallScore >= 8 ? 'Excellent Performance!' : 
               feedbackData.overallScore >= 6 ? 'Good Performance!' : 'Keep Practicing!'}
            </p>
          </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-8 mb-8">
          {/* Detailed Scores */}
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700">
            <h3 className="text-xl font-semibold text-white mb-6 flex items-center">
              <TrendingUp className="w-5 h-5 mr-2 text-blue-500" />
              Performance Breakdown
            </h3>
            
            <div className="space-y-6">
              {[
                { label: 'Vocabulary & Communication', score: feedbackData.vocabularyScore },
                { label: 'Accuracy & Relevance', score: feedbackData.accuracyScore },
                { label: 'Confidence & Delivery', score: feedbackData.confidenceScore }
              ].map((item, index) => (
                <div key={index}>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-300">{item.label}</span>
                    <span className={`font-semibold ${getScoreColor(item.score)}`}>
                      {item.score.toFixed(1)}/10
                    </span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full ${getScoreBackground(item.score)}`}
                      style={{ width: `${(item.score / 10) * 100}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* AI Feedback */}
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700">
            <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
              <MessageSquare className="w-5 h-5 mr-2 text-blue-500" />
              AI Feedback
            </h3>
            <p className="text-gray-300 leading-relaxed">
              {feedbackData.feedback}
            </p>
          </div>
        </div>

        <div className="grid md:grid-cols-3 gap-6 mb-8">
          {/* Strengths */}
          <div className="bg-green-500/10 border border-green-500/30 rounded-xl p-6">
            <h4 className="text-lg font-semibold text-green-400 mb-4">Strengths</h4>
            <ul className="space-y-2">
              {feedbackData.strengths.map((strength, index) => (
                <li key={index} className="text-gray-300 flex items-start">
                  <Star className="w-4 h-4 text-green-400 mr-2 mt-0.5 flex-shrink-0" />
                  {strength}
                </li>
              ))}
            </ul>
          </div>

          {/* Areas for Improvement */}
          <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-xl p-6">
            <h4 className="text-lg font-semibold text-yellow-400 mb-4">Areas for Improvement</h4>
            <ul className="space-y-2">
              {feedbackData.improvements.map((improvement, index) => (
                <li key={index} className="text-gray-300 flex items-start">
                  <TrendingUp className="w-4 h-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0" />
                  {improvement}
                </li>
              ))}
            </ul>
          </div>

          {/* Recommendations */}
          <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-6">
            <h4 className="text-lg font-semibold text-blue-400 mb-4">Recommendations</h4>
            <ul className="space-y-2">
              {feedbackData.recommendations.map((recommendation, index) => (
                <li key={index} className="text-gray-300 flex items-start">
                  <Award className="w-4 h-4 text-blue-400 mr-2 mt-0.5 flex-shrink-0" />
                  {recommendation}
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={startNewInterview}
            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3 px-8 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg flex items-center justify-center"
          >
            <RotateCcw className="w-5 h-5 mr-2" />
            Start New Interview
          </button>
          
          <button
            onClick={downloadReport}
            className="bg-gray-700 hover:bg-gray-600 text-white font-semibold py-3 px-8 rounded-xl transition-all duration-300 shadow-lg flex items-center justify-center"
          >
            <Download className="w-5 h-5 mr-2" />
            Download Report
          </button>
        </div>
      </div>
    </div>
  );
};

export default FeedbackPage;